// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc7280.mecanum_drive_test;

import org.usfirst.frc7280.mecanum_drive_test.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc7280.mecanum_drive_test.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick motionStick;
    public JoystickButton liftFirstLevel;
    public JoystickButton liftSecondLevel;
    public JoystickButton liftThirdLevel;
    public JoystickButton grab;
    public JoystickButton shoot;
    public Joystick functionStick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        functionStick = new Joystick(1);
        motionStick = new Joystick(0);
        
        shoot = new JoystickButton(functionStick, 5);
        grab = new JoystickButton(functionStick, 4);
        liftFirstLevel = new JoystickButton(functionStick, 1);
        liftSecondLevel = new JoystickButton(functionStick, 2);
        liftThirdLevel = new JoystickButton(functionStick, 3);

        shoot.whileHeld(new Grab(Constants.shootSpeed));
        grab.whileHeld(new Grab(Constants.takeSpeed));
        liftFirstLevel.whenPressed(new Lift(Constants.kFirstLevel));
        liftSecondLevel.whenPressed(new Lift(Constants.kSecondLevel));
        liftThirdLevel.whenPressed(new Lift(Constants.kThirdLevel));
        


        // SmartDashboard Buttons
        SmartDashboard.putData("Drive", new Drive());
        SmartDashboard.putData("Lift", new Lift(Constants.kFirstLevel));
        SmartDashboard.putData("Grab", new Grab(Constants.takeSpeed));


    }
}